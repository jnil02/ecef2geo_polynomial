/*
 * Generated. DO NOT EDIT.
 */

#ifndef ECEF2GEO_CHI_HPP
#define ECEF2GEO_CHI_HPP

#define _USE_MATH_DEFINES
#include <cmath>

namespace ecef2geo {
namespace priv {

/** Minimax asin approximations valid on [0,1].
 *
 * @param N Degree of the polynomial.
 * @param x value in [0,1].
 * @return A minimax approximation of (pi/2 - asin(x))/sqrt(1.0 - x).
 */
template<int N> inline double chi(double x) = delete;  // Only allow provided specializations.
template<> inline double chi<1>(double x) { return 1.5649668262311281e+00 + -1.5658276442180544e-01 * x; }
template<> inline double chi<2>(double x) { double x2 = x * x; return 1.5702116976458603e+00 + -2.0212058400388336e-01 * x + 4.6707077880155363e-02 * x2; }
template<> inline double chi<3>(double x) { double x2 = x * x; return 1.5707288189622115e+00 + -2.1211524055762213e-01 * x + (7.4262344817609082e-02 + -1.8729868681788718e-02 * x) * x2; }
template<> inline double chi<4>(double x) { double x2 = x * x; double x4 = x2 * x2; return 1.5707878616372565e+00 + -2.1412466400217967e-01 * x + (8.4666692360295800e-02 + -3.5756539685967685e-02 * x) * x2 + 8.6486772213302613e-03 * x4; }
template<> inline double chi<5>(double x) { double x2 = x * x; double x4 = x2 * x2; return 1.5707952063171373e+00 + -2.1451227177861591e-01 * x + (8.7875651841974519e-02 + -4.4957240949129792e-02 * x) * x2 + (1.9348267697214188e-02 + -4.3371712332445865e-03 * x) * x4; }
template<> inline double chi<6>(double x) { double x2 = x * x; double x4 = x2 * x2; return 1.5707961727105944e+00 + -2.1458526941666314e-01 * x + (8.8755669660861792e-02 + -4.8802611679259490e-02 * x) * x2 + (2.6900099119928069e-02 + -1.1146357362704673e-02 * x + 2.2960134246402582e-03 * x2) * x4; }
template<> inline double chi<7>(double x) { double x2 = x * x; double x4 = x2 * x2; return 1.5707963049952714e+00 + -2.1459880383418343e-01 * x + (8.8979049893930584e-02 + -5.0174715212327148e-02 * x) * x2 + (3.0893053197591073e-02 + -1.7089810809721586e-02 * x + (6.6712932596193130e-03 + -1.2628309167103800e-03 * x) * x2) * x4; }
template<> inline double chi<8>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963236422790e+00 + -2.1460128574433296e-01 * x + (8.9032720439912044e-02 + -5.0613990531630426e-02 * x) * x2 + (3.2650606874146995e-02 + -2.0895806961682085e-02 * x + (1.1225808006764360e-02 + -4.0954092517115442e-03 * x) * x2) * x4 + 7.1459905196732019e-04 * x8; }
template<> inline double chi<9>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963263309381e+00 + -2.1460173715380970e-01 * x + (8.9045095638585021e-02 + -5.0743875863542232e-02 * x) * x2 + (3.3330722797905103e-02 + -2.2890231682718114e-02 * x + (1.4653388256933373e-02 + -7.5222552472627487e-03 * x) * x2) * x4 + (2.5594798557169992e-03 + -4.1335102360927095e-04 * x) * x8; }
template<> inline double chi<10>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267256391e+00 + -2.1460181873603723e-01 * x + (8.9047859113732095e-02 + -5.0780007901891582e-02 * x) * x2 + (3.3569756224972104e-02 + -2.3795977691887691e-02 * x + (1.6738196715506227e-02 + -1.0487086123616274e-02 * x) * x2) * x4 + (5.1038447067858223e-03 + -1.6208443745944435e-03 * x + 2.4331378374443440e-04 * x2) * x8; }
template<> inline double chi<11>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267844353e+00 + -2.1460183340556593e-01 * x + (8.9048460577980405e-02 + -5.0789584443902635e-02 * x) * x2 + (3.3647696161506449e-02 + -2.4165064769127906e-02 * x + (1.7825562733597997e-02 + -1.2540936825206984e-02 * x) * x2) * x4 + (7.5924683444057927e-03 + -3.4911117928073741e-03 * x + (1.0368565141303548e-03 + -1.4527751681173729e-04 * x) * x2) * x8; }
template<> inline double chi<12>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267933006e+00 + -2.1460183603240527e-01 * x + (8.9048588758505052e-02 + -5.0792024609074237e-02 * x) * x2 + (3.3671622816568150e-02 + -2.4303153862137010e-02 * x + (1.8329796462243492e-02 + -1.3751038185856593e-02 * x) * x2) * x4 + (9.5272136428286426e-03 + -5.5320203601637119e-03 * x + (2.4008869075915833e-03 + -6.6857373783667137e-04 * x) * x2 + 8.7773781127018793e-05 * x4) * x8; }
template<> inline double chi<13>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267946510e+00 + -2.1460183650116148e-01 * x + (8.9048615599433542e-02 + -5.0792626365274270e-02 * x) * x2 + (3.3678612550648436e-02 + -2.4351358991325421e-02 * x + (1.8542763455010687e-02 + -1.4380401095762195e-02 * x) * x2) * x4 + (1.0798256601901912e-02 + -7.2918826774021559e-03 * x + (4.0439522776003179e-03 + -1.6571683379101037e-03 * x) * x2 + (4.3387178724883738e-04 + -5.3562724809677582e-05 * x) * x4) * x8; }
template<> inline double chi<14>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267948586e+00 + -2.1460183658456538e-01 * x + (8.9048621136695723e-02 + -5.0792770716881518e-02 * x) * x2 + (3.3680571282738509e-02 + -2.4367246446961202e-02 * x + (1.8626098028204800e-02 + -1.4676637467188599e-02 * x) * x2) * x4 + (1.1531109639172660e-02 + -8.5675083245346239e-03 * x + (5.6003920887711281e-03 + -2.9601736597984054e-03 * x) * x2 + (1.1466969584531041e-03 + -2.8304614323065713e-04 * x + 3.2965787399023498e-05 * x2) * x4) * x8; }
template<> inline double chi<15>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; return 1.5707963267948907e+00 + -2.1460183659936777e-01 * x + (8.9048622264480918e-02 + -5.0792804534833305e-02 * x) * x2 + (3.3681101078422613e-02 + -2.4372234409753484e-02 * x + (1.8656692130886955e-02 + -1.4805088552091256e-02 * x) * x2) * x4 + (1.1911546714833841e-02 + -9.3751743333884159e-03 * x + (6.8343795866428519e-03 + -4.3053507959098671e-03 * x) * x2 + (2.1671959259836242e-03 + -7.9483722159152090e-04 * x + (1.8546363035380122e-04 + -2.0439306470560195e-05 * x) * x2) * x4) * x8; }
template<> inline double chi<16>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; double x16 = x8 * x8; return 1.5707963267948957e+00 + -2.1460183660198913e-01 * x + (8.9048622491635748e-02 + -5.0792812296796250e-02 * x) * x2 + (3.3681240066405535e-02 + -2.4373736574637021e-02 * x + (1.8667331566637893e-02 + -1.4857078197899847e-02 * x) * x2) * x4 + (1.2092631386508560e-02 + -9.8336189754375077e-03 * x + (7.6855893898711154e-03 + -5.4633974470944050e-03 * x) * x2 + (3.3076401718931790e-03 + -1.5857125752576754e-03 * x + (5.5159413284576528e-04 + -1.2197550266244756e-04 * x) * x2) * x4) * x8 + 1.2754544176777881e-05 * x16; }
template<> inline double chi<17>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; double x16 = x8 * x8; return 1.5707963267948965e+00 + -2.1460183660245246e-01 * x + (8.9048622536943916e-02 + -5.0792814046672612e-02 * x) * x2 + (3.3681275570828086e-02 + -2.4374172925348297e-02 * x + (1.8670862830280291e-02 + -1.4876918953706647e-02 * x) * x2) * x4 + (1.2172747383436669e-02 + -1.0071291531222582e-02 * x + (8.2100842886296591e-03 + -6.3278993837482987e-03 * x) * x2 + (4.3671279910859448e-03 + -2.5369588366614161e-03 * x + (1.1590307122361844e-03 + -3.8309521446820528e-04 * x) * x2) * x4) * x8 + (8.0476117495016973e-05 + -8.0043584568231787e-06 * x) * x16; }
template<> inline double chi<18>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; double x16 = x8 * x8; return 1.5707963267948966e+00 + -2.1460183660253421e-01 * x + (8.9048622545903351e-02 + -5.0792814434974340e-02 * x) * x2 + (3.3681284430401487e-02 + -2.4374295730838710e-02 * x + (1.8671988159799984e-02 + -1.4884115235275848e-02 * x) * x2) * x4 + (1.2206039463975348e-02 + -1.0185410804411290e-02 * x + (8.5042859077692046e-03 + -6.9026076875376219e-03 * x) * x2 + (5.2181956820067259e-03 + -3.4855347796590377e-03 * x + (1.9414549204238104e-03 + -8.4603434241738747e-04 * x) * x2) * x4) * x8 + (2.6620763505161977e-04 + -5.3242183459453063e-05 * x + 5.0486339748452772e-06 * x2) * x16; }
template<> inline double chi<19>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; double x16 = x8 * x8; return 1.5707963267948966e+00 + -2.1460183660254862e-01 * x + (8.9048622547661453e-02 + -5.0792814519935107e-02 * x) * x2 + (3.3681286595699539e-02 + -2.4374329340008465e-02 * x + (1.8672334169223010e-02 + -1.4886611746013567e-02 * x) * x2) * x4 + (1.2219141381101816e-02 + -1.0236708631539894e-02 * x + (8.6566605374878837e-03 + -7.2494193946475712e-03 * x) * x2 + (5.8253792634422376e-03 + -4.3013960198304037e-03 * x + (2.7750638569373996e-03 + -1.4818461040448065e-03 * x) * x2) * x4) * x8 + (6.1664306094701757e-04 + -1.8504394775187034e-04 * x + (3.5309177122418156e-05 + -3.1987051040440934e-06 * x) * x2) * x16; }
template<> inline double chi<20>(double x) { double x2 = x * x; double x4 = x2 * x2; double x8 = x4 * x4; double x16 = x8 * x8; return 1.5707963267948966e+00 + -2.1460183660255115e-01 * x + (8.9048622548004073e-02 + -5.0792814538291820e-02 * x) * x2 + (3.3681287115168666e-02 + -2.4374338311865849e-02 * x + (1.8672437232846925e-02 + -1.4887444456396876e-02 * x) * x2) * x4 + (1.2224057157706395e-02 + -1.0258480648703958e-02 * x + (8.7303349932868112e-03 + -7.4421544240986104e-03 * x) * x2 + (6.2176354789355849e-03 + -4.9231847339263359e-03 * x + (3.5394300073407973e-03 + -2.2026547373804144e-03 * x) * x2) * x4) * x8 + (1.1278634686434039e-03 + -4.4874207787417173e-04 * x + (1.2864917198228920e-04 + -2.3465903095497964e-05 * x) * x2 + 2.0348384681697305e-06 * x4) * x16; }

}  // namespace ecef2geo
}  // namespace priv

#endif // ECEF2GEO_CHI_HPP
